deg intercept_angle(vec p, double rate, vec target_pos, vec target_v){
    //求拦截航线
    //省略具体内容
}

Agent Torpedo{//只会直线跑的鱼雷
    vec pos;
    vec vel;
    string camp;//阵营
    Torpedo(Pos p, vec v, string c){//构造函数
        pos=p;
        vel=v;
        camp=c;
    }
    bool near(Agent *s){//如果有船或者潜艇在10m内就爆炸
        if(type(*s)=="Ship"||type(*s)=="Submarine"){//目标是船或者潜艇
            //type是内建函数。不可创建Agent对象，所以不存在派生问题
            if(dis((*s).pos-pos) < 10.0) return true;//目标距离在10m之内
        }
        return false;
    }
    Action(double time, double dlt){//规定格式，它必须知道当前时间和时间间隔
        pos += vel*dlt;
        list<Agent*> l=[near];//相当于python中的filter，但是用C++的vector实现，它会列出所有满足near()=true的Ship*
        if(l.size()>0){
            printf("torpedo exploded at time %lf\n",time);
            for(Agent *s:l){
                erase(s);
            }
            erase();//删除自己
        }
    };
};

Agent Submarine{//它能探测并攻击5km之内的船，如果没有就
    vec pos;
    vec default_vel;//默认航向
    Ship *target;
    double rate;//航行速率
    double angular_speed;//转弯角速度
    string camp;
    Submarine(vec p){
        pos=p;
        target=NULL;
        camp="red";
    }
    bool sonar(Ship *s){//探测距离为5km
        return dis((*s).pos-pos) < 5000.0;
    }
    Action(double time,double dlt){
        if(!active(target)) target=NULL;//active是系统内置函数，能看一个Agent是否已经消失
        if(target==NULL){
            list<Ship*> l=[sonar];//列出能被探测到的所有船,它能自动忽略类型是Submarine/Torpedo等的Agent
            if(l.size()>0){
                taregt = &l[0];
            }
        }
        if(target!=NULL){//有目标，向目标航行
            deg lead_angle=intercept_angle(pos,rate,(*target).pos, '(*target).pos);//'求速度，deg是特有的“角度”类型，它能优雅地处理诸如角度范围这样的问题
            vec now_vel = 'pos; //'求自己的速度
            deg now_angle = atan2(now_vel.y, now_vel.x);
            now_angle:[now_angle-angular_speed*dlt, now_angle+angular_speed*dlt];//角度能朝向的方向范围
            now_angle->lead_angle;//尽量转向lead_angle航向，在deg类型中不用担心范围究竟是[-PI,PI]还是[0,2*PI]这样的问题
            pos += vec(cos(now_angle)*rate, sin(now_angle)*rate, 0);*dlt;
            double d=dis(pos,(*target).pos);
            if(d:<500){//:<是一个运算符，指“这个值刚刚变得小于1”，它会在进入500m范围后发射一枚鱼雷
                //除此之外还有诸如":<", ":<=", ":>=", ":==", ":!="这些运算符，它们同样支持deg类型
                Torpedo t(pos,vel);
                release(t);//让t“活起来”
            }
        }
        else{//沿航向自动行驶
            pos=pos + default_vel;
        }
    }
};

Agent Patroler{//巡逻机,绕圈搜索10km范围内的潜艇,如果有就通知所有我方船只
    vec pos;
    double T,R;//周期和圆半径
    string camp;
    bool detector(Submarine *s){//探测10km范围内的潜艇
        return dis((*s).pos-pos) <= 4000.0;
    }
    bool same_camp(Ship *s){
        return (*s).camp==camp;
    }
    Action(double time,double dlt){
        double omega=PI*2.0/T;//角频率
        pos = Vec(cos(time*omega)*R, sin(time*omega)*R, 0);
        Vec vel='pos; //'代表一阶导数，vel就是它的速度
        deg angle=atan2(vec.y,vec.x);//航向的极角
        if(angle:<>0){//每次angle经过0的时候，即每次通过正东方向时
            printf("we turned a round\n");
        }
        list<Submarine*> sbms=[detector];
        if(sbms.size():>0){//之前没有潜艇，现在有了
            printf("found submarines at time %lf\n",time);
            list<Ship*> sps=[same_camp];
            if(sps.size()>0){
                for(Ship *s:sps){
                    (*s).alert=true;
                }
            }
        }
    }
};

Agent Ship{
    vec pos;
    vec vel;
    vec goal;
    bool alert;
    Ship(vec p,vec g){
        pos=p;
        goal=g;
    }
    Action(double time, double dlt){
        if(!alert){
            pos += vel*dlt;
        }
        else{
            deg alpha=atan2(vel.y,vel.x);
            alpha+=PI/2;//转弯90°
            alert=false;
        }
    }
};

main(void){
    Ship a(....);//略具体参数
    Submarine b(....);
    Patroler c(....);
    release(a);
    release(b);
    release(c);
    //然后自动开始循环
}
